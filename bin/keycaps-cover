#!/usr/bin/env python3
"""Check that a set of kits covers a particular keyboard.
"""
__author__ = 'Martin Blais <blais@furius.ca>'

import argparse
import collections
import itertools
import io
import logging
import sys

from keycaps import colors
from keycaps import keyio
from keycaps import keycaps_pb2
from google.protobuf import text_format


def read_kit(filename):
    kit = keyio.read_file(filename, keycaps_pb2.Kit)
    for key in kit.cap:
        for name in 'profile', 'stem', 'material':
            if not key.HasField(name):
                setattr(key, name, getattr(kit.set, name))
    return kit


CSS = """

.key {
  border: thin solid black;
  margin: 3px;
  padding: 2px;
}

.tooltip .tooltiptext {
  visibility: hidden;
  width: 1024px;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;

  /* Position the tooltip */
  position: absolute;
  z-index: 1;
}

.tooltip:hover .tooltiptext {
  visibility: visible;
}

.unmatched {
  border-style: dashed;
  border-color: red;
}

.other-role {
  border-style: dashed;
  border-color: red;
}

.unused {
  display: inline-block;
  position: relative;
}

.role {
  font-style: italic;
}
.marking {
  font-weight: bold;
  font-size: larger;
}
.row {
  color: #333333;
}
"""


TEMPLATE = """\
<html xmlns="http://www.w3.org/1999/xhtml">
  <head>
    <title>Layout Key Assignment</title>
    <style type="text/css">
{style}
    </style>
  </head>
  <body>
    <h1>Assigned Layout</h1>
    <div id="assignment" style="height: {assigned_height}px; position: relative;">
{keys}
    </div>

    <h1>Unused Keycaps</h1>
{unused}
  </body>
</html>
"""

KEY = """
    <div class="key tooltip {cls}"
         style="position: absolute; left: {left}px; top: {top}px; width: {width}px; height: {height}px; background-color: {color}">
      {text}
      <span class="tooltiptext">{tiptext}</span>
    </div>
"""

UNUSED_KEY = """
    <div class="key tooltip {cls}"
         style="width: {width}px; height: {height}px; background-color: {color}">
      {text}
      <span class="tooltiptext">{tiptext}</span>
    </div>
"""

# The width of a key along its main direction.
SIZE_WIDTH = {
    keycaps_pb2.U100: 8,
    keycaps_pb2.U125: 10,
    keycaps_pb2.U150: 12,
    keycaps_pb2.U175: 14,
    keycaps_pb2.U200: 16,
    keycaps_pb2.U225: 18,
    keycaps_pb2.U250: 20,
    keycaps_pb2.U275: 22,
    keycaps_pb2.U300: 24,
    keycaps_pb2.U600: 48,
    keycaps_pb2.U625: 50,
    keycaps_pb2.U625S: 50,
    keycaps_pb2.U625U: 50,
    keycaps_pb2.U700: 56,
    keycaps_pb2.V200: 16,
    keycaps_pb2.VISO: None,
}


def read_keyboard(filename):
    """Read a keyboard layout file and inherit data.

    Args:
      filename: A string, the name of the file to read.
    Returns:
      An instance of Keyboard.
    """
    keyboard = keyio.read_file(filename, keycaps_pb2.Keyboard)

    # Fill in the (x, y) position of each switch.
    for cluster in keyboard.cluster:
        x = cluster.x
        y = cluster.y
        for switch in cluster.switch:
            if not switch.HasField('x'):
                switch.x = x
            if not switch.HasField('y'):
                switch.y = y
            x += SIZE_WIDTH[switch.size]

    # Inherit the cluster's row onto their switches.
    for cluster in keyboard.cluster:
        for switch in cluster.switch:
            if not switch.HasField('row'):
                switch.row = cluster.row

    return keyboard


def main():
    logging.basicConfig(level=logging.INFO, format='%(levelname)-8s: %(message)s')
    parser = argparse.ArgumentParser(description=__doc__.strip())
    parser.add_argument('keyboard',
                        help='Keyboard filename')
    parser.add_argument('kits', nargs='+',
                        help='Filenames of all kits')
    parser.add_argument('--allow-roles-on-blanks', action='store_true', default=False,
                        help='Allow caps with roles on switches with no role')
    parser.add_argument('--allow-invalid-roles', action='store_true', default=False,
                        help='Allow caps with roles on switches a different role')
    parser.add_argument('--cost', action='store_true', default=False,
                        help='Calculate and print the cost of the set of kits')
    args = parser.parse_args()

    kits = [read_kit(filename) for filename in args.kits]
    allkeys = []
    for kit in kits:
        for key in kit.cap:
            allkeys.append((kit.kit_name, key))

    if args.cost:
        costs = [kit.original_cost
                 for kit in kits
                 if kit.HasField('original_cost')]
        logging.info("Total Cost: %s", sum(costs))

    # Read the target keyboard layout file we have to cover.
    keyboard = read_keyboard(args.keyboard)

    # Define increasingly narrow stages of matching caps to switches.
    match_sets = [
        (lambda sw, key: sw.HasField('role') and sw.role == key.role),
        (lambda sw, key: sw.HasField('role') and not key.HasField('role')),
        (lambda sw, key: not sw.HasField('role') and not key.HasField('role')),
        ]
    if args.allow_roles_on_blanks:
        match_sets.append((lambda sw, key: not sw.HasField('role') and key.HasField('role')))
    if args.allow_invalid_roles:
        match_sets.append((lambda sw, key: True))

    # Process each matching stage.
    keys = list(allkeys)
    switches = [switch
                for cluster in keyboard.cluster
                for switch in cluster.switch]
    matches = []
    for i, func in enumerate(match_sets):
        if not switches:
            break
        nswitches = []
        for switch in switches:
            delete = []
            tr = (SIZE_WIDTH[switch.size], switch.row)
            for index, (kit_name, key) in enumerate(keys):
                sr = (SIZE_WIDTH[key.size], key.row)
                if sr != tr:
                    continue
                if func(switch, key):
                    matches.append((switch, key))
                    delete.append(index)
                    break
            else:
                nswitches.append(switch)
            for index in delete:
                del keys[index]
        switches = nswitches

    for switch in switches:
        logging.error("Could not find key for switch: {}".format(
            text_format.MessageToString(switch, as_one_line=True)))
    matches.extend((switch, None) for switch in switches)

    # Render the assigned keys.
    U = 12
    max_y = 0
    margin = 5
    keysoss = io.StringIO()
    for switch, key in matches:
        oss = io.StringIO()
        oss.write("<p>SWITCH: ")
        oss.write(text_format.MessageToString(switch, as_one_line=True))
        oss.write("</p>\n")
        if key:
            oss.write("<p>KEY: ")
            oss.write(text_format.MessageToString(key, as_one_line=True))
            oss.write("</p>\n")

        text = '<span class="role">{}</span>'.format(switch.role)
        if key:
            text += '\n<br/><span class="marking">{}</span>'.format(key.text or key.glyph)
            if key.row:
                text += '\n<br/><span class="row">{}</span>'.format(keycaps_pb2.Row.Name(key.row))

        if key:
            if switch.role and key.role and switch.role != key.role:
                cls = 'other-role'
            else:
                cls = ''
        else:
            cls = 'unmatched'

        top = switch.y*U
        height = 8*U - 2*margin
        keysoss.write(KEY.format(
            top=top,
            left=switch.x*U,
            width=int(SIZE_WIDTH[switch.size]*U) - 2*margin,
            height=height,
            color=colors.get(key.color) if key else '#FFFFFF',
            text=text,
            tiptext=oss.getvalue(),
            cls=cls))
        max_y = max(max_y, top + height)

    max_y += 2*margin

    # Render all the unused keys.
    groups = collections.defaultdict(list)
    for kit_name, key in keys:
        groups[kit_name].append(key)
    unused_oss = io.StringIO()
    for kit_name, kit_keys in sorted(groups.items()):
        unused_oss.write('<h2>{}</h2>\n'.format(kit_name))
        unused_oss.write('<div class="unused">\n')
        for key in kit_keys:
            oss = io.StringIO()
            oss.write("<p>KEY: ")
            oss.write(text_format.MessageToString(key, as_one_line=True))
            oss.write("</p>\n")

            text = '<span class="role">{}</span>'.format(key.role)
            text += '<br/><span class="marking">{}</span>'.format(key.text or key.glyph)
            if key.row:
                text += '\n<br/><span class="row">{}</span>'.format(keycaps_pb2.Row.Name(key.row))
            cls = 'unused'

            unused_oss.write(UNUSED_KEY.format(
                width=int(SIZE_WIDTH[key.size]*U) - 2*margin,
                height=8*U - 2*margin,
                color=colors.get(key.color) if key else '#FFFFFF',
                text=text,
                tiptext=oss.getvalue(),
                cls=cls))
        unused_oss.write('</div>\n')

    print(TEMPLATE.format(style=CSS,
                          assigned_height=max_y,
                          keys=keysoss.getvalue(),
                          unused=unused_oss.getvalue()))


# TODO(blais): Support vertical keys.


if __name__ == '__main__':
    main()
